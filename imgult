#!/bin/sh
## imgult, the image-ultimator

## thanks to B. Watson for lots of help  :^)

# Ryan P.C. McQuen | Everett, WA | ryan.q@linux.com
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version, with the following exception:
# the text of the GPL license may be omitted.

# This program is distributed in the hope that it will be useful, but
# without any warranty; without even the implied warranty of
# merchantability or fitness for a particular purpose. Compiling,
# interpreting, executing or merely reading the text of the program
# may result in lapses of consciousness and/or very being, up to and
# including the end of all existence and the Universe as we know it.
# See the GNU General Public License for more details.

# You may have received a copy of the GNU General Public License
# along with this program (most likely, a file named COPYING). If
# not, see <http://www.gnu.org/licenses/>.

## override with DEPENDENCY_CHECKER=off
DEPENDENCY_CHECKER=${DEPENDENCY_CHECKER:-on}

## prepend imgult on the command line with
## BACKUPIMAGES=true  (to back everything up)
## EXIFREMOVE=n  (to keep EXIF data)
BACKUPIMAGES=${BACKUPIMAGES:-false}
EXIFREMOVE=${EXIFREMOVE:-true}

## file extensions are easily added now,
## thanks to B. Watson
JPGEXTENSIONS="jpg jpeg jpe jfif jif jfi thm"
PNGEXTENSIONS="png apng mng"
GIFEXTENSIONS="gif"
SVGEXTENSIONS="svg svgz"

RUN_OVERLOAD_PROTECTION_ENCABULATOR() {
  while [ `ps | wc -l` -gt 17 ]; do
    wait
    echo "*-_- OVERLOAD ENCABULATOR PROTECTION INITIATED -_-*"
  done
}

if [ -z "$JPEGTRAN" ]; then
  if [ `uname` = "Darwin" ]; then
    MACOSJPEGTRAN=`find /usr/local/Cellar/mozjpeg -name jpegtran | tail -1 | cut -d/ -f1-7`
  fi
  export PATH=$MACOSJPEGTRAN:/opt/libmozjpeg/bin:/opt/mozjpeg/bin:$PATH
  JPEGTRAN="$(which jpegtran)"
fi

## check to make sure we can be awesome  ;^)
if [ "${DEPENDENCY_CHECKER}" = on ]; then
  if [ -z "$(which exiv2)" ] || \
    [ -z "$JPEGTRAN" ] || [ -z "$(which jpegoptim)" ] || \
    [ -z "$(which pngquant)" ] || [ -z "$(which optipng)" ] || \
    [ -z "$(which gifsicle)" ] || [ -z "$(which svgo)" ]; then
      echo
      echo "You don't have all the imgult dependencies."
      echo
      echo "You need: exiv2, jpegtran (mozjpeg), jpegoptim, pngquant, "
      echo "optipng, gifsicle and svgo."
      echo
      exit 1
  fi
fi

## find out how big the directory/files are
## so we can relish in the savings later
du -hs "$@" > preImgultSize

## bsd find needs a path to work, gnu find does not;
## so we set it here if positional parameters are 
## equal to 0
##
## i was originally checking if "$@" was empty,
## but it turns out that is a nightmare if regex
## paths are fed to imgult
if [ $# -eq 0 ]; then
  set -- .
fi

## this is what we call leaning toothpick syndrome
find "$@" -type f -a \( -iname '*.jpg' -o -iname '*.jpeg' -o -iname '*.jpe' \
  -o -iname '*.jfif' -o -iname '*.jif' -o -iname '*.jfi' -o -iname '*.thm' \
  -o -iname '*.png' -o -iname '*.apng' -o -iname '*.mng' -o -iname '*.gif' \
  -o -iname '*.svg' -o -iname '*.svgz' \) \
    > imgult-files.txt

## back it up!
if [ "$BACKUPIMAGES" = true ]; then
  rsync -avz --files-from=imgult-files.txt $PWD imgult-backup-files/
fi

## clear out that exif!
if [ "$EXIFREMOVE" = "true" ]; then
  cat imgult-files.txt | \
  while read IMGULT_FILE; do
    exiv2 -v rm "$IMGULT_FILE" &
  done
fi

RUN_OVERLOAD_PROTECTION_ENCABULATOR

## standard options with verbosity
egrep -i "($(echo $JPGEXTENSIONS | tr ' ' '|')\$)" imgult-files.txt | \
while read IMGULT_FILE; do
  $JPEGTRAN -verbose -outfile "$IMGULT_FILE" "$IMGULT_FILE" \
  && jpegoptim -v "$IMGULT_FILE" &
done

RUN_OVERLOAD_PROTECTION_ENCABULATOR

## standard options with verbosity
egrep -i "($(echo $PNGEXTENSIONS | tr ' ' '|')\$)" imgult-files.txt | \
while read IMGULT_FILE; do
  pngquant -f -v --skip-if-larger -o "$IMGULT_FILE" -- "$IMGULT_FILE" \
  && optipng -v "$IMGULT_FILE" &
done

RUN_OVERLOAD_PROTECTION_ENCABULATOR

## -b keeps the filename, -O3 uses highest optimization level
## it is an 'O' as in Oxford, not a zero (0)
egrep -i "($(echo $GIFEXTENSIONS | tr ' ' '|')\$)" imgult-files.txt | \
while read IMGULT_FILE; do
  gifsicle -V -b -O3 "$IMGULT_FILE" &
done

RUN_OVERLOAD_PROTECTION_ENCABULATOR

egrep -i "($(echo $SVGEXTENSIONS | tr ' ' '|')\$)" imgult-files.txt | \
while read IMGULT_FILE; do
  svgo "$IMGULT_FILE"
done

RUN_OVERLOAD_PROTECTION_ENCABULATOR

## let everything complete
while [ -e imgult-files.txt ]; do
  if [ "`pgrep egrep`" ] || [ "`pgrep exiv2`" ] \
    || [ "`pgrep jpegtran`" ] || [ "`pgrep jpegoptim`" ] \
    || [ "`pgrep pngquant`" ] || [ "`pgrep optipng`" ] \
    || [ "`pgrep gifsicle`" ] || [ "`pgrep svgo`" ] \
    || [ "`lsof -- imgult-files.txt`" ]; then
      wait
      echo "... TUNING FLUX CAPACITOR ..."
  else
    echo
    ## thanks to patorjk.com/software/taag/
    echo "****************************************************************************** "
    echo "                 ___           ___           ___           ___       ___      "
    echo "     ___        /\__\         /\  \         /\__\         /\__\     /\  \     "
    echo "    /\  \      /::|  |       /::\  \       /:/  /        /:/  /     \:\  \    "
    echo "    \:\  \    /:|:|  |      /:/\:\  \     /:/  /        /:/  /       \:\  \   "
    echo "    /::\__\  /:/|:|__|__   /:/  \:\  \   /:/  /  ___   /:/  /        /::\  \  "
    echo " __/:/\/__/ /:/ |::::\__\ /:/__/_\:\__\ /:/__/  /\__\ /:/__/        /:/\:\__\ "
    echo "/\/:/  /    \/__/--/:/  / \:\  /\ \/__/ \:\  \ /:/  / \:\  \       /:/  \/__/ "
    echo "\::/__/           /:/  /   \:\ \:\__\    \:\  /:/  /   \:\  \     /:/  /      "
    echo " \:\__\          /:/  /     \:\/:/  /     \:\/:/  /     \:\  \    \/__/       "
    echo "  \/__/         /:/  /       \::/  /       \::/  /       \:\__\               "
    echo "                \/__/         \/__/         \/__/         \/__/               "
    echo
    echo "****************************************************************************** "
    echo
    echo "* ... PRE-IMGULT TIME WARP ... * "
    echo "* Execute pre-imgulted capacity outputting: * "
    cat preImgultSize
    echo
    echo "* Execute parametric cleaning sequence: * "
    rm -v preImgultSize imgult-files.txt
    echo
    echo "* Execute imgulted capacity outputting: * "
    ## find the patented imgult savings!
    du -hs "$@"
    echo
    echo "* The imgult has completed. Take care. * "
    echo "****************************************************************************** "
    echo
  fi
done
